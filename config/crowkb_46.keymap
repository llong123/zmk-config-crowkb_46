/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        copy_mac {
            bindings = <&kp RG(C)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste_mac {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
            layers = <0>;
        };

        cut_mac {
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        undo_mac {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20 21>;
        };
    };

    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmd_ctrl: cmd_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "CMD_CTRL";
            #binding-cells = <0>;
            bindings = <&sk LGUI>, <&sk LCTRL>;

            tapping-term-ms = <500>;
        };

        shift_alt: shift_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_ALT";
            #binding-cells = <0>;
            bindings = <&sk LGUI>, <&sk LCTRL>;

            tapping-term-ms = <500>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MacOS {
            display-name = "MACOS";
            bindings = <
&none  &kp SEMI         &kp COMMA   &kp DOT    &kp P      &kp Y                         &kp F        &kp G    &kp C      &kp R      &kp L          &none
&none  &kp A            &kp O       &kp E      &kp U      &kp I                         &kp D        &kp H    &kp T      &kp N      &kp S          &none
&none  &kp NON_US_HASH  &kp Q       &kp J      &kp K      &kp X                         &kp B        &kp M    &kp W      &kp V      &kp Z          &none
                        &shift_alt  &lt 1 TAB  &cmd_ctrl  &kp SPACE  &lt 3 NON_US_HASH  &lt 4 SLASH  &kp RET  &bspc_del  &lt 2 ESC  &sk RIGHT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  &trans  &trans          &kp UP_ARROW    &trans           &trans          &trans  &kp N7  &kp N8  &kp N9  &kp MINUS  &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans          &trans  &kp N4  &kp N5  &kp N6  &kp EQUAL  &trans
&trans  &trans  &trans          &trans          &trans           &trans          &trans  &kp N1  &kp N2  &kp N3  &kp N0     &trans
                &trans          &trans          &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        raise_macOS {
            display-name = "Raise MacOS";
            bindings = <
&trans  &kp LS(NUMBER_1)      &kp LS(NUMBER_2)      &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)              &kp LS(NUMBER_6)  &kp LS(N7)      &kp LS(N8)      &kp LS(N9)      &kp LS(N0)           &none
&trans  &kp RA(NUMBER_1)      &kp RA(NUMBER_2)      &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(N5)              &kp RA(GRAVE)     &kp RA(N7)      &kp RA(N8)      &kp RA(N9)      &kp RS(MINUS)        &none
&trans  &kp RA(RS(NUMBER_1))  &kp RS(RA(NUMBER_2))  &kp RS(RA(N3))    &kp RA(RS(N4))    &kp RA(RS(N5))          &kp RS(GRAVE)     &kp RS(RA(N7))  &kp RA(RS(N8))  &kp RA(RS(N9))  &kp RA(RIGHT_BRACE)  &none
                              &trans                &trans            &trans            &trans          &trans  &trans            &trans          &trans          &trans          &trans
            >;
        };

        tri_layer {
            bindings = <
&none  &bootloader     &none   &out OUT_TOG   &none   &bt BT_SEL 0          &bt BT_SEL 3  &none   &kp C_VOLUME_UP    &none   &bootloader  &none
&none  &none           &none   &none          &none   &bt BT_SEL 1          &bt BT_SEL 4  &none   &kp C_VOLUME_DOWN  &none   &none        &none
&none  &studio_unlock  &none   &kp LC(LG(Q))  &none   &bt BT_SEL 2          &bt BT_CLR    &none   &kp K_MUTE         &none   &none        &none
                       &trans  &trans         &trans  &trans        &trans  &trans        &trans  &trans             &trans  &trans
            >;

            label = "Tri_Layer";
        };

        F_layer {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10         &trans              &trans         &trans            &trans             &trans  &trans
&none   &trans  &kp F4  &kp F5  &kp F6  &kp F11         &kp RC(LEFT_ARROW)  &kp RC(DOWN)   &kp RC(UP_ARROW)  &kp RC(RIGHT)      &none   &none
&none   &trans  &kp F1  &kp F2  &kp F3  &kp F12         &kp LA(LG(LEFT))    &kp LA(LG(C))  &kp LA(LG(F))     &kp LA(LG(RIGHT))  &none   &none
                &none   &none   &trans  &trans   &none  &none               &trans         &trans            &trans             &trans
            >;

            label = "F-Layer";
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        game {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
